name: Pipeline CI

on:
  push:
    branches:
      - main # REMOVER
      - develop

# permissions:
#   contents: read
#   security-events: write
#   issues: write
  
env:
  DOCKER_IMAGE_NAME: devsecops
  
jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Gerar nome da tag única
        id: tag
        run: |
          echo "tag_name=release-${GITHUB_REF##*/}-$(echo $GITHUB_SHA | cut -c1-10)-${GITHUB_RUN_NUMBER}-try${GITHUB_RUN_ATTEMPT}" >> $GITHUB_OUTPUT
      
      - name: Mostrar arquivos
        run: ls -la
        
      # # 📦 Instalar dependências do projeto
      # - name: Install dependencies
      #   run: npm install

  sast:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Instalar Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu focal stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce=5:20.10.13~3-0~ubuntu-focal docker-ce-cli=5:20.10.13~3-0~ubuntu-focal containerd.io --allow-downgrades
          sudo apt-mark hold docker-ce docker-ce-cli containerd.io

      - name: Horusec
        run: |
          mkdir reports
          docker run \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/src/horusec \
            horuszup/horusec-cli:latest horusec start \
            -p /src/horusec \
            -P $(pwd) \
            -o='sarif' \
            -O=/src/horusec/reports/horusec_report.sarif \
            --information-severity

      - name: Upload SARIF Horusec
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/horusec_report.sarif
          category: horusec

      - name: Instalar Semgrep
        run: pip install semgrep

      - name: Rodar Semgrep
        run: |
          semgrep scan \
            --config=p/owasp-top-ten \
            --config=p/secrets \
            --config=p/ci \
            --config=p/default \
            --sarif \
            --sarif-output=reports/semgrep_report.sarif

      - name: Upload SARIF Semgrep
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/semgrep_report.sarif
          category: semgrep

      - name: 🔍 Analisar relatórios SARIF e bloquear pipeline se houver vulnerabilidades
        continue-on-error: true
        run: |
          # Inicializar contador de vulnerabilidades
          TOTAL_VULNERABILIDADES=0
    
          # Verificar se o arquivo de relatório do Semgrep existe e contém vulnerabilidades
          if [ -f reports/semgrep_report.sarif ]; then
            VULNERABILIDADES_SEMGREP=$(jq '[.runs[].results | length] | add' reports/semgrep_report.sarif || echo 0)
            echo "Vulnerabilidades detectadas pelo Semgrep: $VULNERABILIDADES_SEMGREP"
            TOTAL_VULNERABILIDADES=$((TOTAL_VULNERABILIDADES + VULNERABILIDADES_SEMGREP))
          else
            echo "Relatório do Semgrep não encontrado."
          fi
    
          # Verificar se o arquivo de relatório do Horusec existe e contém vulnerabilidades
          if [ -f reports/horusec_report.sarif ]; then
            VULNERABILIDADES_HORUSEC=$(jq '[.runs[].results | length] | add' reports/horusec_report.sarif || echo 0)
            echo "Vulnerabilidades detectadas pelo Horusec: $VULNERABILIDADES_HORUSEC"
            TOTAL_VULNERABILIDADES=$((TOTAL_VULNERABILIDADES + VULNERABILIDADES_HORUSEC))
          else
            echo "Relatório do Horusec não encontrado."
          fi
    
          # Exibir o total de vulnerabilidades detectadas
          echo "Total de vulnerabilidades detectadas: $TOTAL_VULNERABILIDADES"
    
          # Bloquear a pipeline se houver vulnerabilidades
          if [ "$TOTAL_VULNERABILIDADES" -gt 0 ]; then
            echo "❌ Security Gate: Vulnerabilidades encontradas! Bloqueando a pipeline."
            exit 1
          else
            echo "✅ Nenhuma vulnerabilidade encontrada. Prosseguindo com a pipeline."
          fi
          
  sca:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Instalar dependências
        run: npm install

      - name: Rodar audit do NPM (ou Snyk, OWASP, etc.)
        run: npm audit --audit-level=high

  container-scan:
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login no GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Definir REPO_OWNER e TAG_NAME
        run: |
          echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "TAG_NAME=${{ needs.init.outputs.tag_name }}" >> $GITHUB_ENV
        
      - name: Build da imagem
        run: |
          docker build -t ghcr.io/"$REPO_OWNER"/"$DOCKER_IMAGE_NAME":"$TAG_NAME" .

      - name: Rodar Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME}}:${{ needs.init.outputs.tag_name }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,CRITICAL,HIGH'
          
      # (SCA) Snyk

      # (SCA) OWASP Dependency-Check



      - name: Push da imagem para o GHCR
        run: |
          docker push ghcr.io/"$REPO_OWNER"/"$DOCKER_IMAGE_NAME":"$TAG_NAME"
          
      - name: Criar release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.init.outputs.tag_name}}
          name: Docker Image - ${{ needs.init.outputs.tag_name }}
          body: Imagem Docker gerada e publicada no GHCR.
          token: ${{ secrets.GITHUB_TOKEN }}




# ------------------------------------------------------------------------------------------------
# - name: Salvar tag em arquivo
#   run: echo "${{ steps.tag.outputs.tag_name }}" > tag.txt

# - name: Upload do artefato com a tag
#   uses: actions/upload-artifact@v4
#   with:
#     name: image-tag
#     path: tag.txt
    
# - name: Build App
#   run: |
#     mkdir build
#     echo "Build gerado em ${{ github.sha }}" > build/app.txt
    
# - name: Upload local artifact (opcional)
#   uses: actions/upload-artifact@v4
#   with:
#     name: ${{ steps.tag.outputs.tag_name }}
#     path: build
# ------------------------------------------------------------------------------------------------
